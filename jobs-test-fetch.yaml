jobs:
  - script: |
        // 1) Create the two top‐level folders
        ['backend','frontend'].each { top ->
            folder(top) {
                description('Top‐level folder: ' + top)
            }
        }

        // 2) Define your lists of services
        def backendServices = [
            'cimbt-ctip-bioapi',
            'cimbt-ctip-ctipapi',
            'cimbt-ctip-ctipwebapp',
            'cimbt-ctip-dbapi',
            'cimbt-ctip-dbmqapi',
            'cimbt-ctip-facerecognitionapi',
            'cimbt-ctip-hsmapi',
            'cimbt-ctip-ialapi',
            'cimbt-ctip-settlementapi'
        ]
        def frontendServices = [
            'cimbt-ctip-oidapi',
            'cimbt-ctip-oiddbapi',
            'cimbt-ctip-oidxml',
        ]

        // 3) Create each service folder under its parent
        backendServices.each { svc ->
            def svcFolder = 'backend/' + svc
            folder(svcFolder) {
                description('Backend service: ' + svc)
            }
        }

        frontendServices.each { svc ->
            def svcFolder = 'frontend/' + svc
            folder(svcFolder) {
                description('Frontend service: ' + svc)
            }
        }

        // 4) (Optional) Create pipelineJobs inside each service
        def repoUrl      = 'https://github.com/padstrike/example-pipeline.git'
        def environments = ['dev','sit','uat']

        backendServices.each { svc ->
            def base = 'backend/' + svc
            environments.each { env ->
                def jobName = base + '/' + svc + '-' + env
                def jenkinsfilePath = svc + '/' + env + '.Jenkinsfile'

                try {
                    pipelineJob(jobName) {
                        description('Pipeline for ' + svc + ' [' + env + ']')
                        keepDependencies(false)
                        definition {
                            cpsScm {
                                scm {
                                    git {
                                        remote {
                                            url(repoUrl)
                                            credentials('gitlab')
                                        }
                                        branch('main')
                                    }
                                }
                                scriptPath(jenkinsfilePath)
                                lightweight(true)
                            }
                        }
                        disabled(false)
                    }
                } catch (Exception ex) {
                    println '❌ Failed to create job "' + jobName + '": ' + ex.toString()
                }
            }
        }
