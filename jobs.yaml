jobs:
    - script: |
          // === 1. Create root folders (no trailing “/”, no GStrings) ===
          ['PAD', 'PAD/DevOps'].each { base ->
              folder(base) {
                  description('Folder: ' + base)
              }
          }

          // === 2. Constants ===
          def repoUrl      = 'https://github.com/padstrike/example-pipeline.git'
          def projects     = ['project-a', 'project-b']
          def environments = ['dev', 'sit', 'uat']

          // === 3. Per-project subfolders + pipeline jobs ===
          projects.each { proj ->
              // build “PAD/DevOps/project-a” etc.
              def projectFolder = 'PAD/DevOps/' + proj

              folder(projectFolder) {
                  description('Project folder for ' + proj + ' under DevOps')
              }

              environments.each { env ->
                  // jobName = PAD/DevOps/project-a/project-a-dev
                  def jobName         = projectFolder + '/' + proj + '-' + env
                  def jenkinsfilePath = proj + '/' + env + '.Jenkinsfile'

                  try {
                      pipelineJob(jobName) {
                          description('Pipeline for ' + proj + ' [' + env + '] under DevOps')
                          keepDependencies(false)

                          definition {
                              cpsScm {
                                  scm {
                                      git {
                                          remote {
                                              url(repoUrl)
                                              credentials('gitlab')
                                          }
                                          branch('main')
                                      }
                                  }
                                  scriptPath(jenkinsfilePath)
                                  lightweight(true)
                              }
                          }

                          disabled(false)
                      }
                  } catch (Exception ex) {
                      // single-quoted + concatenation → no ${…} warnings
                      println '❌ Failed to create job "' + jobName + '": ' + ex.toString()
                  }
              }
          }
